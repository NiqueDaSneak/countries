{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/domclemmer/Desktop/countries/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/domclemmer/Desktop/countries/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/domclemmer/Desktop/countries/src/pages/Countries.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n\\t\\t\\t{\\n\\t\\t\\t\\tcountries {\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tlanguages{\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\tnative\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nconst Countries = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        countries = _useState2[0],\n        setCountries = _useState2[1]; // var countryData;\n\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'https://countries.trevorblades.com'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  client.query({\n    query: gql(_templateObject())\n  }).then(result => {\n    setCountries(result.data.countries);\n  });\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, countries.map(country => React.createElement(React.Fragment, null, React.createElement(\"li\", {\n    key: country.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, country.name), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, country.languages.map(lang => React.createElement(React.Fragment, null, React.createElement(\"li\", {\n    key: lang.native,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, lang.native), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    key: lang.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, lang.name))))))));\n};\n\nexport default Countries;","map":{"version":3,"sources":["/Users/domclemmer/Desktop/countries/src/pages/Countries.js"],"names":["React","useState","ApolloClient","gql","InMemoryCache","HttpLink","Countries","props","countries","setCountries","cache","link","uri","client","query","then","result","data","map","country","name","languages","lang","native"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAUC,YAAV,EAAwBC,GAAxB,QAAmC,cAAnC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAIA,MAAMC,SAAS,GAAKC,KAAF,IAAa;AAAA,oBACIN,QAAQ,CAAC,EAAD,CADZ;AAAA;AAAA,QACvBO,SADuB;AAAA,QACZC,YADY,kBAG9B;;;AAED,QAAMC,KAAK,GAAG,IAAIN,aAAJ,EAAd;AACA,QAAMO,IAAI,GAAG,IAAIN,QAAJ,CAAa;AACxBO,IAAAA,GAAG,EAAE;AADmB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAC/BQ,IAAAA,KAD+B;AAE/BC,IAAAA;AAF+B,GAAjB,CAAf;AAKAE,EAAAA,MAAM,CAACC,KAAP,CAAa;AACXA,IAAAA,KAAK,EAAEX,GAAF;AADM,GAAb,EAYGY,IAZH,CAYQC,MAAM,IAAI;AACjBP,IAAAA,YAAY,CAACO,MAAM,CAACC,IAAP,CAAYT,SAAb,CAAZ;AACA,GAdD;AAeC,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEA,SAAS,CAACU,GAAV,CAAeC,OAAO,IACrB,0CACC;AAAI,IAAA,GAAG,EAAEA,OAAO,CAACC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBD,OAAO,CAACC,IAAhC,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,OAAO,CAACE,SAAR,CAAkBH,GAAlB,CAAuBI,IAAI,IAC3B,0CACC;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBD,IAAI,CAACC,MAA5B,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAI,IAAA,GAAG,EAAED,IAAI,CAACF,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBE,IAAI,CAACF,IAA1B,CADD,CAFD,CADA,CADF,CAFD,CADD,CAFF,CADD;AAqBA,CAnDD;;AAqDA,eAAed,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport  { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\n\n\nconst Countries = ( props ) => {\n\tconst [countries, setCountries] = useState([])\n\n\t// var countryData;\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://countries.trevorblades.com',\n})\n\nconst client = new ApolloClient({\n\tcache,\n\tlink\n});\n\nclient.query({\n\t\tquery: gql`\n\t\t\t{\n\t\t\t\tcountries {\n\t\t\t\t\tname\n\t\t\t\t\tlanguages{\n\t\t\t\t\t\tname\n\t\t\t\t\t\tnative\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n    `\n}).then(result => {\n\tsetCountries(result.data.countries)\n});\n\treturn (\n\t\t<ul>\n\t\t\t{\n\t\t\t\tcountries.map( country => (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<li key={country.name}>{country.name}</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{country.languages.map( lang => (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<li key={lang.native}>{lang.native}</li>\n\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t<li key={lang.name}>{lang.name}</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t))\n\t\t\t}\n\t\t</ul>\n\t)\n}\n\nexport default Countries"]},"metadata":{},"sourceType":"module"}