{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/domclemmer/Desktop/countries/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/domclemmer/Desktop/countries/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n\\t\\t\\t{\\n\\t\\t\\t\\tcountries {\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nconst Countries = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        countries = _useState2[0],\n        setCountries = _useState2[1]; // var countryData;\n\n\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'https://countries.trevorblades.com'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  client.query({\n    query: gql(_templateObject())\n  }).then(result => {\n    setCountries(result.data); // countryData = result.data\n  }); //  const renderData = (countries) => (\n  // )\n  // console.log(countryData)\n  // return (countries.length === 0 ? <h1>No Data</h1> : renderData(countries))\n  // return <h1>No Data</h1>\n}; // <h1>Countries Page</h1>\n// { }\n\n\nexport default Countries;","map":{"version":3,"sources":["/Users/domclemmer/Desktop/countries/src/pages/Countries.js"],"names":["React","useState","ApolloClient","gql","InMemoryCache","HttpLink","Countries","props","countries","setCountries","cache","link","uri","client","query","then","result","data"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAUC,YAAV,EAAwBC,GAAxB,QAAmC,cAAnC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAIA,MAAMC,SAAS,GAAKC,KAAF,IAAa;AAAA,oBACIN,QAAQ,CAAC,EAAD,CADZ;AAAA;AAAA,QACvBO,SADuB;AAAA,QACZC,YADY,kBAG9B;;;AAED,QAAMC,KAAK,GAAG,IAAIN,aAAJ,EAAd;AACA,QAAMO,IAAI,GAAG,IAAIN,QAAJ,CAAa;AACxBO,IAAAA,GAAG,EAAE;AADmB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAC/BQ,IAAAA,KAD+B;AAE/BC,IAAAA;AAF+B,GAAjB,CAAf;AAKAE,EAAAA,MAAM,CAACC,KAAP,CAAa;AACXA,IAAAA,KAAK,EAAEX,GAAF;AADM,GAAb,EAQGY,IARH,CAQQC,MAAM,IAAI;AACjBP,IAAAA,YAAY,CAACO,MAAM,CAACC,IAAR,CAAZ,CADiB,CAEjB;AACA,GAXD,EAf+B,CA4B/B;AAEA;AACC;AACA;AACA;AAEA,CAnCD,C,CAoCC;AACA;;;AAED,eAAeX,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport  { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\n\n\nconst Countries = ( props ) => {\n\tconst [countries, setCountries] = useState([])\n\n\t// var countryData;\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://countries.trevorblades.com',\n})\n\nconst client = new ApolloClient({\n\tcache,\n\tlink\n});\n\nclient.query({\n\t\tquery: gql`\n\t\t\t{\n\t\t\t\tcountries {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n    `\n}).then(result => {\n\tsetCountries(result.data)\n\t// countryData = result.data\n});\n\n//  const renderData = (countries) => (\n\t\n// )\n\t// console.log(countryData)\n\t// return (countries.length === 0 ? <h1>No Data</h1> : renderData(countries))\n\t// return <h1>No Data</h1>\n\n}\n\t// <h1>Countries Page</h1>\n\t// { }\n\nexport default Countries"]},"metadata":{},"sourceType":"module"}