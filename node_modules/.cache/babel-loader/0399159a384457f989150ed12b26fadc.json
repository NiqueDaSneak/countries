{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/domclemmer/Desktop/countries/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/domclemmer/Desktop/countries/src/pages/Countries.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n\\t\\t\\t{\\n\\t\\t\\t\\tcountries {\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nvar countryData;\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://countries.trevorblades.com'\n});\nconst client = new ApolloClient({\n  cache,\n  link\n});\nclient.query({\n  query: gql(_templateObject())\n}).then(result => {\n  countryData = result.data;\n  console.log(countryData);\n});\n\nconst renderData = countryData => React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, countryData.map(country => {}));\n\nconst Countries = props => {\n  // return (countryData ? <h1>No Data</h1> : renderData(countryData))\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"No Data\");\n}; // <h1>Countries Page</h1>\n// { }\n\n\nexport default Countries;","map":{"version":3,"sources":["/Users/domclemmer/Desktop/countries/src/pages/Countries.js"],"names":["React","ApolloClient","gql","InMemoryCache","HttpLink","countryData","cache","link","uri","client","query","then","result","data","console","log","renderData","map","country","Countries","props"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,YAAV,EAAwBC,GAAxB,QAAmC,cAAnC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,IAAIC,WAAJ;AAEA,MAAMC,KAAK,GAAG,IAAIH,aAAJ,EAAd;AACA,MAAMI,IAAI,GAAG,IAAIH,QAAJ,CAAa;AACxBI,EAAAA,GAAG,EAAE;AADmB,CAAb,CAAb;AAIA,MAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC/BK,EAAAA,KAD+B;AAE/BC,EAAAA;AAF+B,CAAjB,CAAf;AAKAE,MAAM,CAACC,KAAP,CAAa;AACXA,EAAAA,KAAK,EAAER,GAAF;AADM,CAAb,EAQGS,IARH,CAQQC,MAAM,IAAI;AACjBP,EAAAA,WAAW,GAAGO,MAAM,CAACC,IAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;AACA,CAXD;;AAaA,MAAMW,UAAU,GAAIX,WAAD,IAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACEA,WAAW,CAACY,GAAZ,CAAiBC,OAAO,IAAI,CAE5B,CAFA,CADF,CADD;;AAQA,MAAMC,SAAS,GAAKC,KAAF,IAAa;AAC9B;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAEA,CAJD,C,CAKC;AACA;;;AAED,eAAeD,SAAf","sourcesContent":["import React from 'react'\nimport  { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nvar countryData;\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://countries.trevorblades.com',\n})\n\nconst client = new ApolloClient({\n\tcache,\n\tlink\n});\n\nclient.query({\n\t\tquery: gql`\n\t\t\t{\n\t\t\t\tcountries {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n    `\n}).then(result => {\n\tcountryData = result.data\n\tconsole.log(countryData)\n});\n\nconst renderData = (countryData) => (\n\t<ul>\n\t\t{countryData.map( country => {\n\t\t\t\n\t\t})}\n\t</ul>\n)\n\nconst Countries = ( props ) => {\n\t// return (countryData ? <h1>No Data</h1> : renderData(countryData))\n\treturn <h1>No Data</h1>\n\n}\n\t// <h1>Countries Page</h1>\n\t// { }\n\nexport default Countries"]},"metadata":{},"sourceType":"module"}