{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/domclemmer/Desktop/countries/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/domclemmer/Desktop/countries/src/pages/Countries.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n\\t\\t\\t{\\n\\t\\t\\t\\tcountries {\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nconst Countries = props => {\n  var countryData;\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: 'https://countries.trevorblades.com'\n  });\n  const client = new ApolloClient({\n    cache,\n    link\n  });\n  client.query({\n    query: gql(_templateObject())\n  }).then(result => {\n    countryData = result.data;\n  });\n\n  const renderData = countryData => React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, countryData.map(country => React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"country.name\")));\n\n  console.log(countryData);\n  return countryData ? React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"No Data\") : renderData(countryData); // return <h1>No Data</h1>\n}; // <h1>Countries Page</h1>\n// { }\n\n\nexport default Countries;","map":{"version":3,"sources":["/Users/domclemmer/Desktop/countries/src/pages/Countries.js"],"names":["React","useState","ApolloClient","gql","InMemoryCache","HttpLink","Countries","props","countryData","cache","link","uri","client","query","then","result","data","renderData","map","country","console","log"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAUC,YAAV,EAAwBC,GAAxB,QAAmC,cAAnC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAIA,MAAMC,SAAS,GAAKC,KAAF,IAAa;AAC9B,MAAIC,WAAJ;AAED,QAAMC,KAAK,GAAG,IAAIL,aAAJ,EAAd;AACA,QAAMM,IAAI,GAAG,IAAIL,QAAJ,CAAa;AACxBM,IAAAA,GAAG,EAAE;AADmB,GAAb,CAAb;AAIA,QAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC/BO,IAAAA,KAD+B;AAE/BC,IAAAA;AAF+B,GAAjB,CAAf;AAKAE,EAAAA,MAAM,CAACC,KAAP,CAAa;AACXA,IAAAA,KAAK,EAAEV,GAAF;AADM,GAAb,EAQGW,IARH,CAQQC,MAAM,IAAI;AACjBP,IAAAA,WAAW,GAAGO,MAAM,CAACC,IAArB;AACA,GAVD;;AAYC,QAAMC,UAAU,GAAIT,WAAD,IACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEA,WAAW,CAACU,GAAZ,CAAiBC,OAAO,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,CAFF,CADA;;AASAC,EAAAA,OAAO,CAACC,GAAR,CAAYb,WAAZ;AACA,SAAQA,WAAW,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,GAAsBS,UAAU,CAACT,WAAD,CAAnD,CAnC8B,CAoC9B;AAEA,CAtCD,C,CAuCC;AACA;;;AAED,eAAeF,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport  { ApolloClient, gql } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\n\n\nconst Countries = ( props ) => {\n\tvar countryData;\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://countries.trevorblades.com',\n})\n\nconst client = new ApolloClient({\n\tcache,\n\tlink\n});\n\nclient.query({\n\t\tquery: gql`\n\t\t\t{\n\t\t\t\tcountries {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n    `\n}).then(result => {\n\tcountryData = result.data\n});\n\n const renderData = (countryData) => (\n\t<ul>\n\t\t{\n\t\t\tcountryData.map( country => (\n\t\t\t\t<li>country.name</li>\n\t\t\t))\n\t\t}\n\t</ul>\n)\n\tconsole.log(countryData)\n\treturn (countryData ? <h1>No Data</h1> : renderData(countryData))\n\t// return <h1>No Data</h1>\n\n}\n\t// <h1>Countries Page</h1>\n\t// { }\n\nexport default Countries"]},"metadata":{},"sourceType":"module"}